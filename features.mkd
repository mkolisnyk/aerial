---
title: Features
layout: default
---

# Run Options

## Command Line

## Maven Plugin

[![Aerial Maven Plugin](https://maven-badges.herokuapp.com/maven-central/com.github.mkolisnyk/aerial-maven-plugin/badge.svg?style=flat)](http://mvnrepository.com/artifact/com.github.mkolisnyk/aerial-maven-plugin)

Since 0.0.2 version the Aerial is provided not only as the library or command line utility but also as the Maven plugin which is bound to **generate-sources** phase. Main goal implementing generation is **aerial:generate**.
More information can be found on [project documentation pages](http://mkolisnyk.github.io/aerial/aerial-maven-plugin-0.0.2/).

## Library

# Input Sources Supported

## String

## File

## JIRA

**Since version 0.0.2**

In some cases initial requirements may be stored somewhere in tracking systems like Jira. E.g. we can use some specific issue type and all specifications are placed in the description field.
In this case we should be able to retrieve them the same way as from multiple files. For this purpose we can use **JIRA** as an input source.

Here is the Maven example on how to set Jira as an input source:
{% highlight xml linenos=table %}
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>com.mkolisnyk.github</groupId>
        <artifactId>aerial-maven-plugin</artifactId>
        <version>0.0.2</version>
        <configuration>
            <inputType>JIRA</inputType>
            <source>http://localhost:8080/jira</source>
            <outputType>FILE</outputType>
            <destination>output/</destination>
            <namedParams>
                <user>some_user</user>
                <password>some_password</password>
                <field>description</field>
            </namedParams>
            <valueParams>
                <param>project=Wallboards AND status=Open</param>
            </valueParams>
        </configuration>
      </plugin>
      ...
    </plugins>
  </build>
  ...
</project>
{% endhighlight %}

More detailed description of the above example can be found [here](http://mkolisnyk.github.io/aerial/aerial-maven-plugin-0.0.2/usage.html#Generating_Features_Based_on_JIRA_Content_Example).

# Scenarios Generated

Aerial uses document in specific format to generate scenarios. Each document contains specific sections and generally can be represented with the following structure: 

{% highlight bat linenos=table %}
< Entire document description >

Feature: < Feature Name >
    < Feature description >

    Case: < Case Name >
        < Case Description >

        Action:
            < Action text >
        Input:
            < Input Data Table >
        On Success:
            < Actions in case of success >
        On Failure:
            < Actions in case of error >
        Pre-requisites:
            < Pre-requisites steps >
    Additional Scenarios:
        < Explicitly defined custom Cucumber scenarios >
{% endhighlight %}

Mainly it generates several sets of scenarios based on input data given.
They are:

* **Positive Scenarios** - scenarios operating with valid data and expecting valid output

* **Negative Scenarios** - scenarios operating with incorrect data expecting error output

* **Unique Value Scenarios** - scenarios which are targeted to make sure that some value cannot be used more than once within the same scenario

Depending on scenario type different sections are used in different combinations.
The below paragraphs contain more detailed description of each scenario generation.

# Positive Scenarios

Positive scenarios operate with positive values and they are targeted to check expected behaviour. Mainly positive scenarios are generated from document description using the following structure:

{% highlight bat linenos=table %}
    Scenario: < Case Name > positive test
        Given < Pre-requisites steps >
        When < Action text >
        Then < Actions in case of success >
    Examples:
        <The positive test data table>
{% endhighlight %}

# Negative Scenarios

Negative scenarios are built the same way as positive scenarios except they operate with negative test data where at least one item doesn't fit acceptable format. Also, since this scenario uses 
invalid input it expects actions on errors to be expected results. So, mainly negative test scenario is build using the following template:

{% highlight bat linenos=table %}
    Scenario: < Case Name > negative test
        Given < Pre-requisites steps >
        When < Action text >
        Then < Actions in case of error >
    Examples:
        <The negative test data table>
{% endhighlight %}

# Unique Value Scenarios

Unique value scenario generation is triggered as soon as at least one field has **Unique** column value set to **true** in the input data table.
In this context the **Unique** term isn't restricted just with the case when we cannot create 2 records with the same value of some field. In this case uniqueness means
that we cannot perform some action twice having the same value for some field.

Getting to the technical side of the scenario generation we should get the scenario when we run action successfully at first turn but on the second turn we get the error if we use the same value in some field.
Thus, the unique value scenario can be described with the following template:
{% highlight bat linenos=table %}
    Scenario: < Case Name > negative test
        Given < Pre-requisites steps >
        When < Action text >
        Then < Actions in case of success >
        When < Action text >
        Then < Actions in case of error >
    Examples:
        <Unique scenario data>
{% endhighlight %}

# Data Types Supported

# Int

# Date

# String
